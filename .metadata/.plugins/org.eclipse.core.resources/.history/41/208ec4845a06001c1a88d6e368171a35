package rs.ac.bg.etf.pp1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.apache.log4j.xml.DOMConfigurator;

import java_cup.runtime.Symbol;
import rs.ac.bg.etf.pp1.MJTableSymbolTest;
import rs.ac.bg.etf.pp1.ast.Program;
import rs.ac.bg.etf.pp1.util.Log4JUtils;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.Tab;

public class MyCompiler implements Compiler {
	
	static {
		DOMConfigurator.configure(Log4JUtils.instance().findLoggerConfigFile());
		Log4JUtils.instance().prepareLogFile(Logger.getRootLogger());
	}
	
	
static List<CompilerError> errors =new ArrayList<CompilerError>();

	@Override
	public List<CompilerError> compile(String sourceFilePath, String outputFilePath) {
		Logger log = Logger.getLogger(MyCompiler.class);
		Reader br = null;
		try {
			File sourceCode = new File("test/"+sourceFilePath);
			log.info("Compiling source file: " + sourceCode.getAbsolutePath());
			
			br = new BufferedReader(new FileReader(sourceCode));
			Yylex lexer = new Yylex(br);
			
			MJParser p = new MJParser(lexer);
	        Symbol s = p.parse();  //pocetak parsiranja
	        
	        Program prog = (Program)(s.value); 
	        Tab.init();
			// ispis sintaksnog stabla
			log.info(prog.toString(""));
			log.info("===================================");

			// ispis prepoznatih programskih konstrukcija
			SemanticAnalyzer v = new SemanticAnalyzer();
			prog.traverseBottomUp(v); 
	      
			log.info(" Print count calls = " + v.printCallCount);

			log.info(" Deklarisanih promenljivih ima = " + v.varDecl);
			
			log.info("===================================");
			Tab.dump();
			
			if( v.passed() && MyCompiler.errors.size() == 0){
				File objFile=new File("test/program.obj");
				if(objFile.exists())objFile.delete();
				
				log.info("Parsiranje uspesno zavrseno!");
				CodeGenerator codeGener=new CodeGenerator();
				prog.traverseBottomUp(codeGener);
				Code.dataSize=v.varDecl;
				Code.mainPc=codeGener.getMainPc();
				Code.write(new FileOutputStream(objFile));
				log.info("Parsiranje USPESNO zavrseno!");
			}else{
				if(!v.isMainExist)log.error("Ne postoji main funkcija");
				log.error("Parsiranje NIJE uspesno zavrseno!");
			}
				
			File outputLoggs = new File("test/" + outputFilePath);
			FileWriter fileWriter = new FileWriter(outputLoggs);
			
			for (CompilerError error : errors) {
				fileWriter.write(error.toString() + "\n");
			}
			
			fileWriter.close();
	    
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			if (br != null) try { br.close(); } catch (IOException e1) { log.error(e1.getMessage(), e1); }
		}
		return errors;
		
	}
	
public static void main(String[] args) {
		
		if(args.length != 2) {
			System.out.println("Unesite dva argumenta.");
			return;
		}		
		
		MyCompiler compiler = new MyCompiler();
		
		compiler.compile(args[0], args[1]);
		
	}

}
